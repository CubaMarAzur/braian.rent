generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  OWNER
  TENANT
}

enum PaymentStatus {
  UNPAID
  PARTIALLY_PAID
  PAID
}

enum PaymentType {
  RENT
  ADMIN_FEE
  UTILITIES
  DEPOSIT
  OTHER
}

enum DocumentType {
  LEASE_AGREEMENT
  INSURANCE
  HANDOVER_PROTOCOL
}

model User {
  id       String  @id @default(uuid())
  email    String  @unique
  password String  // Hashed password
  role     Role    @default(OWNER)
  name     String
  phone    String

  // Relacje do Property
  ownedProperties Property[] @relation("OwnerProperties")

  // Relacje do Lease
  leasesAsOwner  Lease[] @relation("OwnerLeases")
  leasesAsTenant Lease[] @relation("TenantLeases")

  // Relacje do ChatThread
  chatThreadsAsOwner  ChatThread[] @relation("OwnerChatThreads")
  chatThreadsAsTenant ChatThread[] @relation("TenantChatThreads")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Property {
  id         String   @id @default(cuid())
  address    String
  city       String
  postalCode String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relacja do User (Owner)
  owner   User   @relation("OwnerProperties", fields: [ownerId], references: [id])
  ownerId String

  // Relacje do Lease
  leases Lease[] @relation("PropertyLeases")

  // Relacje do Document
  documents Document[] @relation("PropertyDocuments")

  // Relacje do ChatThread
  chatThreads ChatThread[] @relation("PropertyChatThreads")
}

model Lease {
  id         String   @id @default(cuid())
  startDate  DateTime
  endDate    DateTime
  rentAmount Decimal
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relacja do Property
  property   Property @relation("PropertyLeases", fields: [propertyId], references: [id])
  propertyId String

  // Relacje do User
  owner    User   @relation("OwnerLeases", fields: [ownerId], references: [id])
  ownerId  String
  tenant   User   @relation("TenantLeases", fields: [tenantId], references: [id])
  tenantId String

  // Relacje do Payment
  payments Payment[] @relation("LeasePayments")

  // Relacje do Document
  documents Document[] @relation("LeaseDocuments")
}

model Payment {
  id          String        @id @default(cuid())
  amountDue   Decimal
  amountPaid  Decimal?
  dueDate     DateTime
  status      PaymentStatus @default(UNPAID)
  type        PaymentType   @default(RENT)
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relacja do Lease
  lease   Lease  @relation("LeasePayments", fields: [leaseId], references: [id])
  leaseId String
}

model Document {
  id        String       @id @default(cuid())
  fileUrl   String
  type      DocumentType
  expiresAt DateTime?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  // Relacja do Property
  property   Property @relation("PropertyDocuments", fields: [propertyId], references: [id])
  propertyId String

  // Relacja do Lease (opcjonalna)
  lease   Lease?  @relation("LeaseDocuments", fields: [leaseId], references: [id])
  leaseId String?
}

model ChatThread {
  id                String   @id @default(cuid())
  firestoreThreadId String   @unique
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relacja do Property
  property   Property @relation("PropertyChatThreads", fields: [propertyId], references: [id])
  propertyId String

  // Relacje do User
  owner    User   @relation("OwnerChatThreads", fields: [ownerId], references: [id])
  ownerId  String
  tenant   User   @relation("TenantChatThreads", fields: [tenantId], references: [id])
  tenantId String
}
