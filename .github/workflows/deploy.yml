name: Deploy to GCP Cloud Run

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allow manual trigger

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: europe-west1
  APP_NAME: braian-rent
  ARTIFACT_REGISTRY: europe-west1-docker.pkg.dev

jobs:
  # Job 1: Lint and Test
  lint-and-test:
    name: Lint & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.18.0'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check formatting
        run: npm run format:check

      - name: TypeScript type check
        run: npx tsc --noEmit

      - name: Run tests
        run: npm run test:run

  # Job 2: Terraform Plan & Apply (creates Artifact Registry)
  terraform:
    name: Terraform Plan & Apply
    runs-on: ubuntu-latest
    needs: lint-and-test

    permissions:
      contents: read
      id-token: write
      pull-requests: write

    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Terraform Format Check
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="prefix=terraform/state"

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: |
          terraform plan \
            -var="project_id=${{ env.GCP_PROJECT_ID }}" \
            -var="region=${{ env.GCP_REGION }}" \
            -var="environment=prod" \
            -out=tfplan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve tfplan

      - name: Terraform Output
        if: github.ref == 'refs/heads/main'
        run: terraform output -json > terraform-outputs.json

      - name: Upload Terraform outputs
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs
          path: terraform/terraform-outputs.json

  # Job 3: Build and Push Docker Image (requires Artifact Registry from Terraform)
  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: terraform

    permissions:
      contents: read
      id-token: write

    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}
      image_digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.ARTIFACT_REGISTRY }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.APP_NAME }}-images/${{ env.APP_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            NODE_ENV=production

      - name: Output image details
        run: |
          echo "Image pushed successfully!"
          echo "Tags: ${{ steps.meta.outputs.tags }}"
          echo "Digest: ${{ steps.build.outputs.digest }}"

  # Job 4: Deploy to Cloud Run
  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: [build-and-push, terraform]

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Deploy to Cloud Run
        run: |
          gcloud run services update ${{ env.APP_NAME }}-service \
            --region ${{ env.GCP_REGION }} \
            --image ${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.APP_NAME }}-images/${{ env.APP_NAME }}:latest \
            --platform managed

      - name: Get Cloud Run URL
        id: get-url
        run: |
          URL=$(gcloud run services describe ${{ env.APP_NAME }}-service \
            --region ${{ env.GCP_REGION }} \
            --format 'value(status.url)')
          echo "url=$URL" >> $GITHUB_OUTPUT
          echo "Cloud Run URL: $URL"

      - name: Health check
        run: |
          URL="${{ steps.get-url.outputs.url }}"
          echo "Checking health at: $URL/api/health"

          # Wait for service to be ready
          sleep 10

          # Check health endpoint
          HEALTH_STATUS=$(curl -s "$URL/api/health" | jq -r '.status')

          if [ "$HEALTH_STATUS" = "healthy" ]; then
            echo "✅ Service is healthy!"
          else
            echo "❌ Service health check failed!"
            exit 1
          fi

  # Job 5: Database Migrations
  migrate-database:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    needs: deploy

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.18.0'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Install Cloud SQL Proxy
        run: |
          wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 -O cloud_sql_proxy
          chmod +x cloud_sql_proxy

      - name: Get Cloud SQL connection name
        id: get-connection
        run: |
          CONNECTION_NAME=$(gcloud sql instances describe ${{ env.APP_NAME }}-db-prod \
            --format='value(connectionName)')
          echo "connection_name=$CONNECTION_NAME" >> $GITHUB_OUTPUT

      - name: Start Cloud SQL Proxy
        run: |
          ./cloud_sql_proxy -instances=${{ steps.get-connection.outputs.connection_name }}=tcp:5432 &
          sleep 5

      - name: Get DATABASE_URL from Secret Manager
        id: get-db-url
        run: |
          DATABASE_URL=$(gcloud secrets versions access latest \
            --secret="${{ env.APP_NAME }}-database-url")
          echo "::add-mask::$DATABASE_URL"
          echo "database_url=$DATABASE_URL" >> $GITHUB_OUTPUT

      - name: Run Prisma migrations
        env:
          DATABASE_URL: ${{ steps.get-db-url.outputs.database_url }}
        run: |
          npx prisma migrate deploy
          echo "✅ Migrations completed successfully!"

      - name: Generate Prisma Client
        run: npx prisma generate

  # Job 6: Post-deployment verification
  verify-deployment:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: migrate-database

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Get service URL
        id: get-url
        run: |
          URL=$(gcloud run services describe ${{ env.APP_NAME }}-service \
            --region ${{ env.GCP_REGION }} \
            --format 'value(status.url)')
          echo "url=$URL" >> $GITHUB_OUTPUT

      - name: Test health endpoint
        run: |
          curl -f "${{ steps.get-url.outputs.url }}/api/health" || exit 1

      - name: Test login page
        run: |
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${{ steps.get-url.outputs.url }}/auth/login")
          if [ "$STATUS" = "200" ]; then
            echo "✅ Login page is accessible"
          else
            echo "❌ Login page returned status: $STATUS"
            exit 1
          fi

      - name: Deployment summary
        run: |
          echo "🎉 Deployment completed successfully!"
          echo "📍 Application URL: ${{ steps.get-url.outputs.url }}"
          echo "🔐 Login: ${{ steps.get-url.outputs.url }}/auth/login"
          echo "📊 Health: ${{ steps.get-url.outputs.url }}/api/health"
