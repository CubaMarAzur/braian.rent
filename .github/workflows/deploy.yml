name: Deploy to GCP Cloud Run

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allow manual trigger

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: europe-west3
  APP_NAME: braian-rent
  ARTIFACT_REGISTRY: europe-west3-docker.pkg.dev

jobs:
  # Job 1: Lint and Test
  lint-and-test:
    name: Lint & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.18.0'

      - name: Cache Node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check formatting
        run: npm run format:check

      - name: TypeScript type check
        run: npx tsc --noEmit

      - name: Run tests
        run: npm run test:run

  # Job 2: IaC Security Scan (tfsec)
  iac-scan:
    name: IaC Security Scan
    runs-on: ubuntu-latest

    # FIX: Add permissions to prevent rate limiting
    permissions:
      contents: read
      actions: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: terraform
          soft_fail: false
          format: sarif
          additional_args: --minimum-severity HIGH
        # FIX: Add GITHUB_TOKEN to prevent rate limiting
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Upload tfsec results to GitHub Security
      #   uses: github/codeql-action/upload-sarif@v3
      #   if: always()
      #   with:
      #     sarif_file: results.sarif

  # Job 3: Container Security Scan (Trivy)
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: lint-and-test

    # FIX: Add permissions to prevent rate limiting
    permissions:
      contents: read
      actions: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image for scanning
        run: |
          # FIX: Use cache for faster builds
          docker build -t braian-rent:scan-${{ github.sha }} . \
            --cache-from type=gha \
            --cache-to type=gha,mode=max

      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy

      - name: Run Trivy vulnerability scanner
        continue-on-error: true
        run: |
          trivy image \
            --quiet \
            --ignore-unfixed \
            --severity HIGH,CRITICAL \
            --format sarif --output trivy-results.sarif \
            braian-rent:scan-${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Upload Trivy results to GitHub Security
      #   uses: github/codeql-action/upload-sarif@v3
      #   if: always()
      #   with:
      #     sarif_file: trivy-results.sarif

  # Job 4: Terraform Plan & Apply (creates Artifact Registry)
  terraform:
    name: Terraform Plan & Apply
    runs-on: ubuntu-latest
    needs: [lint-and-test, iac-scan]

    permissions:
      contents: read
      id-token: write
      pull-requests: write

    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Terraform
        uses: actions/cache@v4
        with:
          path: terraform/.terraform
          key: ${{ runner.os }}-tf-${{ hashFiles('terraform/**/.terraform.lock.hcl') }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Terraform Format Check
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        run: |
          terraform init -input=false \
            -backend-config="bucket=braian-rent-terraform-state" \
            -backend-config="prefix=terraform/state"

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: |
          terraform plan -input=false -lock-timeout=2m \
            -var-file="terraform.tfvars.production" \
            -out=tfplan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -input=false -lock-timeout=2m -auto-approve tfplan

      - name: Terraform Output
        if: github.ref == 'refs/heads/main'
        run: terraform output -json > terraform-outputs.json

      - name: Upload Terraform outputs
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs
          path: terraform/terraform-outputs.json

  # Job 5: Build and Push Docker Image (requires Artifact Registry from Terraform)
  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [terraform, container-scan]

    permissions:
      contents: read
      id-token: write

    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}
      image_digest: ${{ steps.build.outputs.digest }}
      image: ${{ steps.image.outputs.full_image }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.ARTIFACT_REGISTRY }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.APP_NAME }}-images/${{ env.APP_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ steps.meta.outputs.tags }}
            ${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.APP_NAME }}-images/${{ env.APP_NAME }}:deploy-${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            NODE_ENV=production

      - name: Output image details
        run: |
          echo "Image pushed successfully!"
          echo "Tags: ${{ steps.meta.outputs.tags }}"
          echo "Digest: ${{ steps.build.outputs.digest }}"
          echo "Debug - meta.outputs.tags: '${{ steps.meta.outputs.tags }}'"
          echo "Debug - meta.outputs.json: '${{ steps.meta.outputs.json }}'"

      - name: Export image SHA tag
        id: image
        run: |
          # Extract SHA-based tag (e.g., main-abc1234)
          SHA_TAG=$(echo "${{ steps.meta.outputs.tags }}" | grep -o "main-[a-f0-9]\{7\}" | head -1)
          FULL_IMAGE="${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.APP_NAME }}-images/${{ env.APP_NAME }}:${SHA_TAG}"
          echo "sha_tag=${SHA_TAG}" >> $GITHUB_OUTPUT
          echo "full_image=${FULL_IMAGE}" >> $GITHUB_OUTPUT
          echo "Using immutable image tag: ${FULL_IMAGE}"
          echo "Debug - SHA_TAG: '${SHA_TAG}'"
          echo "Debug - FULL_IMAGE: '${FULL_IMAGE}'"

  # Job 4: Deploy to Cloud Run
  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: [build-and-push, terraform]
    environment:
      name: production
      url: ${{ steps.get-url.outputs.url }}

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Deploy to Cloud Run
        run: |
          # Use simple deploy tag
          DEPLOY_TAG="${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.APP_NAME }}-images/${{ env.APP_NAME }}:deploy-${{ github.sha }}"
          echo "Using deploy tag: $DEPLOY_TAG"

          gcloud run services update ${{ env.APP_NAME }}-service \
            --region ${{ env.GCP_REGION }} \
            --image "$DEPLOY_TAG" \
            --platform managed

      - name: Get Cloud Run URL
        id: get-url
        run: |
          URL=$(gcloud run services describe ${{ env.APP_NAME }}-service \
            --region ${{ env.GCP_REGION }} \
            --format 'value(status.url)')
          echo "url=$URL" >> $GITHUB_OUTPUT
          echo "Cloud Run URL: $URL"

      - name: Health check
        run: |
          URL="${{ steps.get-url.outputs.url }}"
          echo "Checking health at: $URL/api/health"

          # Wait for service to be ready
          sleep 10

          # Check health endpoint
          HEALTH_STATUS=$(curl -s "$URL/api/health" | jq -r '.status')

          if [ "$HEALTH_STATUS" = "healthy" ]; then
            echo "✅ Service is healthy!"
          else
            echo "❌ Service health check failed!"
            exit 1
          fi

  # Job 5: Database Migrations (via Cloud Run Job)
  migrate-database:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    needs: deploy

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Execute database migration job
        run: |
          echo "🔄 Running database migrations via Cloud Run Job..."
          gcloud run jobs execute ${{ env.APP_NAME }}-db-migrate \
            --region ${{ env.GCP_REGION }} \
            --wait

          echo "✅ Migrations completed successfully!"

  # Job 6: Post-deployment verification
  verify-deployment:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: migrate-database

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Get service URL
        id: get-url
        run: |
          URL=$(gcloud run services describe ${{ env.APP_NAME }}-service \
            --region ${{ env.GCP_REGION }} \
            --format 'value(status.url)')
          echo "url=$URL" >> $GITHUB_OUTPUT

      - name: Test health endpoint
        run: |
          curl -f "${{ steps.get-url.outputs.url }}/api/health" || exit 1

      - name: Test login page
        run: |
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${{ steps.get-url.outputs.url }}/auth/login")
          if [ "$STATUS" = "200" ]; then
            echo "✅ Login page is accessible"
          else
            echo "❌ Login page returned status: $STATUS"
            exit 1
          fi

      - name: Deployment summary
        run: |
          echo "🎉 Deployment completed successfully!"
          echo "📍 Application URL: ${{ steps.get-url.outputs.url }}"
          echo "🔐 Login: ${{ steps.get-url.outputs.url }}/auth/login"
          echo "📊 Health: ${{ steps.get-url.outputs.url }}/api/health"

  # Error Reporting Job - temporarily disabled for debugging YAML syntax
  # TODO: Re-enable after fixing YAML syntax issues
